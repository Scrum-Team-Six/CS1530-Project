<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Travel Budget Pro</title>
  <link rel="stylesheet" href="styles.css">
  <!-- Include Handsontable CSS -->
  <link href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css" rel="stylesheet">
</head>

<!-- add on right max budget and whats been spent for each catagory -->

<style>
  .content {
    color: #fff;
    background-color: #264042;
    padding: 20px;
    display: flex;
    flex: 1;
    flex-direction: row;
    position: relative;
    width: 100%;
  }
  .budget-container {
    height: 100% !important;
    width: 70% !important;
    flex-direction: column;
  }
  .title-box {
    display: flex;
    flex-direction: row;
    margin-bottom: 10px;
  }
  .input-box{
    margin-left: 20px;
    margin-right: 50px;
  }
  /* Table styles */
  #handsontable-container {
    height: 80% !important;
    width: 100% !important;
    margin-top: 10px;
    overflow: hidden;
    flex: 1;
  }

  .ht_master {
    height: 100% !important;
    width: 100% !important;
  }

  .wtHolder {
    height: 100% !important;
    width: 100% !important;
  }

  .max-budget-container {
    position: relative;
    flex-direction: column;
    height: auto;
    width: 90%;
    margin-left: 20px;
    background-color: #333;
    border: 2px solid #ccc;
  }

  .total-max {
    height: 50%;
    width: 100%;
  }

  .max-per-catagory {
    height: 50%;
    width: 100%;
  }

  footer {
    background-color: #333;
    color: #fff;
    padding: 10px 20px;
    border-top: 2px solid #ccc;
    text-align: center;
    margin-top: auto; /* Push footer to bottom */
  }
  
</style>

<body>
  <header>
    <div class="welcome-message">
      <h2>Welcome, <%= firstName %></h2> <!-- Dynamic greeting: This is not a bug! -->
    </div>
    <div class="logout-button">
      <a href="/login">
          <button id="logout-button">Logout</button>
      </a>
    </div>
    <div class="header-text-container"> <!-- Text container for independent positioning -->
      <h1>Travel Budget Pro</h1>
      <p>Stay up-to-date on your travel expenses</p>
    </div>
  </header>

  <div id="display" class="display">
    <nav id="sidebar">
      <h2>Menu</h2>
      <ul>
        <li><a href="/home">Home</a></li>
        <li><cur>Create Budget</cur></li> 
        <li><a href="/createReport">Create Report</a></li>
        <li><a href="/settings">Edit Settings</a></li>
      </ul>
    </nav>
  
    <div class="content">
      <div class="budget-container">
        <!-- Box to name a budget -->
        <div class="title-box">
          <label class="white-label" for="budget-title">Budget Title:</label>
          <input type="text" id="budget-title" name="budgetTitle" placeholder="Enter budget title" class="input-box">
          <form id="save-budget-form" action="/createBudget" method="post">
            <!-- Hidden input field to store spreadsheet data for index.js to find -->
            <input type="hidden" id="budget-data" name="budgetData">
            <input type="hidden" id="budget-id" name="budgetID">
            <!-- Button to save a budget-->
            <button id="save-budget-btn" type="submit" style="margin-bottom: 10px;">Save Budget</button>
          </form>
          <form id="delete-budget-form" action="/deleteBudget" method="post">
            <button id="delete-budget-btn" type="submit" style="margin-bottom: 10px;">Delete Budget</button>
            <input type="hidden" id="budget-id1" name="budgetID1">
          </form>
        
        </div>

        <!-- Buttons for adding/deleting rows -->
        <button id="add-row-button">Add Expense</button> 
        <button id="delete-row-button">Delete Last Expense</button>

        <!-- Handsontable grid -->
        <div id="handsontable-container"></div>
      </div>
      <div class="max-budget-container">
        <div class="total-max">
          <h2>Budget Max</h2>
        </div>
        <div class="max-per-catagory">
          <h2>Max per Catagory</h2>
        </div>
      </div>
    </div>
  </div>

  <footer>
    &copy; 2024 Travel Budget Pro
  </footer>

  <!-- Includes Handsontable API -->
  <script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
  <script src="https://handsontable.com/docs/scripts/fixer.js"></script>
  <script>
    var stringBudgetData = '<%- JSON.stringify(budgetData || {}) %>';
  </script>
  
  <script>
    // Allows expenses tabs to be seen when table is shorter than tab list
    window.onload = function() {
      var container = document.getElementById('handsontable-container');
      if (container) {
        container.style.overflow = 'visible';
      }

       //Loads budget name into box if user clicked on an existing budget
       if(stringBudgetData != '{}'){
        const budget = JSON.parse(stringBudgetData);
        document.getElementById('budget-title').value = budget.budgetName;  
        document.getElementById('budget-id').value = budget._id;
        document.getElementById('budget-id1').value = budget._id;
      }  else{
        //Assign null hex value to signify new budget
        document.getElementById('budget-id').value = '000000000000000000000000';
        document.getElementById('budget-id1').value = '000000000000000000000000';
      }
    };
    
  </script>

  <!-- Saves a spreadsheet into a hidden input field when the save button is clicked -->
  <script>
    
    var container = document.getElementById('handsontable-container'); // Container where spreadsheet is displayed
    var save = document.getElementById('save'); // Save button
    var handsontableData = [{}]; //Assign handsontable data to empty (creates single empty row)
    //Trying to get length of array to set table size
    if(stringBudgetData.length > 2){
      const budget = JSON.parse(stringBudgetData);
      const arraySize = budget.expenseCategory.length;
      rowCount = arraySize; 
      var handsontableData = []; //Remove empty set before adding data
      for (let i = 0; i < arraySize; i++) {
      handsontableData.push({ //Add data to table
        expenseCategory: budget.expenseCategory[i],
        currency: budget.currency[i],
        cost: budget.cost[i],
        description: budget.description[i]
      });
    }
    } else{
      rowCount = 1;
    }

    // Initialize the Handsontable instance
    const hot = new Handsontable(container, {
      data: handsontableData,
      startRows: rowCount,
      startCols: 5,
      fillHandle: true,
      contextMenu: {
        items: {
          // Remove row only when there is more than 1 row in the spreadsheet
          remove_row: {
            name: 'Remove row',
            callback: function () {
              hot.alter('remove_row');
            },
            disabled: function () {
              // Disable remove_row when there's only one row
              return hot.countRows() <= 1;
            }
          },
          // Undo and Redo
          undo: { name: 'Undo', disabled: function () { return !hot.isUndoAvailable(); } },
          redo: { name: 'Redo', disabled: function () { return !hot.isRedoAvailable(); } },
          // Alignment options
          alignment: {
            name: 'Alignment',
            submenu: {
              items: [
                { name: 'Left', key: 'alignment:left' },
                { name: 'Center', key: 'alignment:center' },
                { name: 'Right', key: 'alignment:right' }
              ]
            }
          },
          // Copy, Paste, Cut
          copy: { name: 'Copy' },
          paste: { name: 'Paste' },
          cut: { name: 'Cut' }
        }
      },
      allowInsertRow: false, // Disable inserting rows
      allowInsertColumn: false, // Disable inserting columns
      rowHeaders: true,
      colHeaders: ['Expense Category', 'Currency', 'Cost', 'Description'],
      colWidths: [150, 150, 150, 150],
      height: 'auto',
      licenseKey: 'non-commercial-and-evaluation',
      columns: [
        // Expense Category settings
        {
          data: 'expenseCategory',
          type: 'dropdown',
          trimWhitespace: false,
          source: [
            "",
            "Food",
            "Transportation",
            "Entertainment",
            "Lodging",
          ],
          strict: false,
        },
        // Currency settings
        {
          data: 'currency',
          type: 'dropdown',
          source: [
            "",
            "USD - United States Dollar",
            "EUR - Euro",
            "GBP - British Pound",
            "JPY - Japanese Yen",
            "CNY - Chinese Yuan",
            "INR - Indian Rupee",
            "AUD - Australian Dollar",
            "CAD - Canadian Dollar",
            "SGD - Singapore Dollar",
            "CHF - Swiss Franc",
            "MYR - Malaysian Ringgit",
            "NZD - New Zealand Dollar",
            "THB - Thai Baht",
            "RUB - Russian Ruble",
            "ZAR - South African Rand",
            "BRL - Brazilian Real",
            "PHP - Philippine Peso",
            "IDR - Indonesian Rupiah",
            "TRY - Turkish Lira",
            "KRW - South Korean Won",
            "MXN - Mexican Peso",
            "NOK - Norwegian Krone",
          ],
          strict: true,
          allowInvalid: false,
        },
        // Cost settings
        {
          data: 'cost',
          type: 'numeric',
        },
        // Description settings
        {
          data: 'description',
        },
      ],
    });

    // Add event listener to the save button form submission
    document.getElementById('save-budget-form').addEventListener('submit', function (event) {
      // Store the budget title
      var budgetTitle = document.getElementById('budget-title').value;

      // Store data in variables by columns
      var col1 = hot.getDataAtCol(0);
      var col2 = hot.getDataAtCol(1);
      var col3 = hot.getDataAtCol(2);
      var col4 = hot.getDataAtCol(3);

      // Check if any cell is empty or there's no budget name
      if (col1.some(cell => cell === null || cell === "") ||
        col2.some(cell => cell === null || cell === "") ||
        col3.some(cell => cell === null || cell === "") ||
        col4.some(cell => cell === null || cell === "") ||
        budgetTitle.trim() === "") {
        // Display pop-up message if any cell is empty
        alert("Please fill out all cells before saving.");
        event.preventDefault(); // Prevent form submission
      } else {
        // Store the column data
        var columnData = {
          budgetName: budgetTitle,
          expenseCategory: col1,
          currency: col2,
          cost: col3,
          description: col4
        };

        // Serialize the column data
        var serializedData = JSON.stringify(columnData);

        // Assign serialized data to the hidden input field
        document.getElementById('budget-data').value = serializedData;
      }
    });

    //Stops new budget (unsaved) from being deleted
    document.getElementById('delete-budget-form').addEventListener('submit', function (event) {
      if(document.getElementById('budget-id').value == '000000000000000000000000'){
        alert("Unsaved budgets cannot be deleted");
        event.preventDefault(); // Prevent form submission
      }
    });

    hot.addHook('afterRemoveRow', function () {
        hot.updateSettings({
          contextMenu: hot.getSettings().contextMenu
        });
      });
  </script>

  <!-- Adds a row of cells when the "Add Expense" button is clicked. -->
  <script>
    document.getElementById('add-row-button').addEventListener('click', function (event) {
      // Get data for the last row
      var lastRowData = hot.getDataAtRow(hot.countRows() - 1);

      // Check if the last row is entirely filled in
      if (lastRowData.every(cell => cell !== null && cell !== "")) {
        // Last row is entirely filled in - insert a new row below the last row
        hot.alter('insert_row_below', hot.countRows());
      } else {
        // Display a message indicating that the user needs to fill in the last row
        alert("Please fill in the last row before adding another expense.");
      }
    });
  </script>

  <!-- Deletes the last row of cells when the "Remove Last Expense" button is clicked. -->
  <script>
    // Add event listener to the "Delete Last Row" button
    document.getElementById('delete-row-button').addEventListener('click', function (event) {
      if (hot.countRows() > 1) {
        // Delete the last row
        hot.alter('remove_row', hot.countRows() - 1);
      } else {
        // Last row in the spreadsheet - just clear the contents
        for (var i = 0; i < hot.countCols(); i++) {
          hot.setDataAtCell(hot.countRows() - 1, i, "");
        }
      }
    });
  </script>
</body>
</html>